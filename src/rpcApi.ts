
// Autogenerated by generateRpcApi.ts
/* eslint-disable @typescript-eslint/ban-ts-comment */

import { DbUserEntry, LobbyReadyState, RawPlayerInfo, RecordedLobbyInfo, Vector3, VTGRHeader } from "./shared.js";
import { EventEmitter } from "./eventEmitter.js";
import { RPCPacket } from "./rpc.js";

export type InstancedRpcCallback<T> = (className: string, method: string, id: string | number, args: any[], classObj: T) => void;
export type NonInstancedRpcCallback<T> = (className: string, method: string, args: any[], classObj: T) => void;

export class Application {
	constructor(private onRpc: NonInstancedRpcCallback<Application>) {}

	
	public CreateLobby(id: string) {
		this.onRpc("Application", "CreateLobby", [id], this);
	}

	public SyncLobbies(ids: string[]) {
		this.onRpc("Application", "SyncLobbies", [ids], this);
	}

	public RawLobbySync() {
		this.onRpc("Application", "RawLobbySync", [], this);
	}

	public RawLobbySyncDone() {
		this.onRpc("Application", "RawLobbySyncDone", [], this);
	}

}

export class Client {
	private listeners: Record<string, Array<(...args: any[]) => void>> = {};

	constructor(public id: string | number, private onRpc?: InstancedRpcCallback<Client>) { }

	public fireRpcEvent(packet: RPCPacket) {
		if(packet.id != this.id) console.warn("RPC packet ID does not match instance ID:", packet.id, this.id);
		// @ts-ignore
		this.emit(packet.method, ...packet.args);
	}

	public emit(event: string, ...args: any[]) {
		if (this.listeners[event]) {
			this.listeners[event].forEach(handler => {
				handler(...args);
			});
		}
	}

	
	public replayLobbyInfo(info: RecordedLobbyInfo) {
		this.onRpc("Client", "replayLobbyInfo", this.id, [info], this);
	}

	public invalidateToken() {
		this.onRpc("Client", "invalidateToken", this.id, [], this);
	}

	public replayHeader(header: VTGRHeader) {
		this.onRpc("Client", "replayHeader", this.id, [header], this);
	}

	public expectReplaySize(size: number) {
		this.onRpc("Client", "expectReplaySize", this.id, [size], this);
	}

	public ping(n: number) {
		this.onRpc("Client", "ping", this.id, [n], this);
	}

	public error(message: string) {
		this.onRpc("Client", "error", this.id, [message], this);
	}

	public adminSearchUsersResult(users: DbUserEntry[]) {
		this.onRpc("Client", "adminSearchUsersResult", this.id, [users], this);
	}

	public newToken(token: string) {
		this.onRpc("Client", "newToken", this.id, [token], this);
	}


	public on(event: "replayLobbyInfo", handler: (info: RecordedLobbyInfo) => void): void
	public on(event: "invalidateToken", handler: () => void): void
	public on(event: "replayHeader", handler: (header: VTGRHeader) => void): void
	public on(event: "expectReplaySize", handler: (size: number) => void): void
	public on(event: "ping", handler: (n: number) => void): void
	public on(event: "error", handler: (message: string) => void): void
	public on(event: "adminSearchUsersResult", handler: (users: DbUserEntry[]) => void): void
	public on(event: "newToken", handler: (token: string) => void): void
	public on(event: string, handler: (...args: any[]) => void): void {
		if (!this.listeners[event]) {
			this.listeners[event] = [];
		}

		this.listeners[event].push(handler);
	}
}

export class DebugLine {
	private listeners: Record<string, Array<(...args: any[]) => void>> = {};

	constructor(public id: string | number, private onRpc?: InstancedRpcCallback<DebugLine>) { }

	public fireRpcEvent(packet: RPCPacket) {
		if(packet.id != this.id) console.warn("RPC packet ID does not match instance ID:", packet.id, this.id);
		// @ts-ignore
		this.emit(packet.method, ...packet.args);
	}

	public emit(event: string, ...args: any[]) {
		if (this.listeners[event]) {
			this.listeners[event].forEach(handler => {
				handler(...args);
			});
		}
	}

	
	public SetStart(pos: Vector3) {
		this.onRpc("DebugLine", "SetStart", this.id, [pos], this);
	}

	public SetEnd(pos: Vector3) {
		this.onRpc("DebugLine", "SetEnd", this.id, [pos], this);
	}

	public SetColor(color: number) {
		this.onRpc("DebugLine", "SetColor", this.id, [color], this);
	}

	public Hide() {
		this.onRpc("DebugLine", "Hide", this.id, [], this);
	}


	public on(event: "SetStart", handler: (pos: Vector3) => void): void
	public on(event: "SetEnd", handler: (pos: Vector3) => void): void
	public on(event: "SetColor", handler: (color: number) => void): void
	public on(event: "Hide", handler: () => void): void
	public on(event: string, handler: (...args: any[]) => void): void {
		if (!this.listeners[event]) {
			this.listeners[event] = [];
		}

		this.listeners[event].push(handler);
	}
}

export class DebugSphere {
	private listeners: Record<string, Array<(...args: any[]) => void>> = {};

	constructor(public id: string | number, private onRpc?: InstancedRpcCallback<DebugSphere>) { }

	public fireRpcEvent(packet: RPCPacket) {
		if(packet.id != this.id) console.warn("RPC packet ID does not match instance ID:", packet.id, this.id);
		// @ts-ignore
		this.emit(packet.method, ...packet.args);
	}

	public emit(event: string, ...args: any[]) {
		if (this.listeners[event]) {
			this.listeners[event].forEach(handler => {
				handler(...args);
			});
		}
	}

	
	public SetPosition(pos: Vector3) {
		this.onRpc("DebugSphere", "SetPosition", this.id, [pos], this);
	}

	public SetScale(scale: number) {
		this.onRpc("DebugSphere", "SetScale", this.id, [scale], this);
	}

	public SetColor(color: number) {
		this.onRpc("DebugSphere", "SetColor", this.id, [color], this);
	}

	public Hide() {
		this.onRpc("DebugSphere", "Hide", this.id, [], this);
	}


	public on(event: "SetPosition", handler: (pos: Vector3) => void): void
	public on(event: "SetScale", handler: (scale: number) => void): void
	public on(event: "SetColor", handler: (color: number) => void): void
	public on(event: "Hide", handler: () => void): void
	public on(event: string, handler: (...args: any[]) => void): void {
		if (!this.listeners[event]) {
			this.listeners[event] = [];
		}

		this.listeners[event].push(handler);
	}
}

export class AIAirVehicle {
	private listeners: Record<string, Array<(...args: any[]) => void>> = {};

	constructor(public id: string | number, private onRpc?: InstancedRpcCallback<AIAirVehicle>) { }

	public fireRpcEvent(packet: RPCPacket) {
		if(packet.id != this.id) console.warn("RPC packet ID does not match instance ID:", packet.id, this.id);
		// @ts-ignore
		this.emit(packet.method, ...packet.args);
	}

	public emit(event: string, ...args: any[]) {
		if (this.listeners[event]) {
			this.listeners[event].forEach(handler => {
				handler(...args);
			});
		}
	}

	
	public UpdateData(pos: Vector3, vel: Vector3, accel: Vector3, rot: Vector3) {
		this.onRpc("AIAirVehicle", "UpdateData", this.id, [pos, vel, accel, rot], this);
	}

	public Damage() {
		this.onRpc("AIAirVehicle", "Damage", this.id, [], this);
	}

	public Die() {
		this.onRpc("AIAirVehicle", "Die", this.id, [], this);
	}

	public Spawn() {
		this.onRpc("AIAirVehicle", "Spawn", this.id, [], this);
	}


	public on(event: "UpdateData", handler: (pos: Vector3, vel: Vector3, accel: Vector3, rot: Vector3) => void): void
	public on(event: "Damage", handler: () => void): void
	public on(event: "Die", handler: () => void): void
	public on(event: "Spawn", handler: () => void): void
	public on(event: string, handler: (...args: any[]) => void): void {
		if (!this.listeners[event]) {
			this.listeners[event] = [];
		}

		this.listeners[event].push(handler);
	}
}

export class AIGroundUnit {
	private listeners: Record<string, Array<(...args: any[]) => void>> = {};

	constructor(public id: string | number, private onRpc?: InstancedRpcCallback<AIGroundUnit>) { }

	public fireRpcEvent(packet: RPCPacket) {
		if(packet.id != this.id) console.warn("RPC packet ID does not match instance ID:", packet.id, this.id);
		// @ts-ignore
		this.emit(packet.method, ...packet.args);
	}

	public emit(event: string, ...args: any[]) {
		if (this.listeners[event]) {
			this.listeners[event].forEach(handler => {
				handler(...args);
			});
		}
	}

	
	public UpdateData(pos: Vector3, vel: Vector3, accel: Vector3, rot: Vector3) {
		this.onRpc("AIGroundUnit", "UpdateData", this.id, [pos, vel, accel, rot], this);
	}

	public FireBullet(position: Vector3, velocity: Vector3) {
		this.onRpc("AIGroundUnit", "FireBullet", this.id, [position, velocity], this);
	}

	public Damage() {
		this.onRpc("AIGroundUnit", "Damage", this.id, [], this);
	}

	public Die() {
		this.onRpc("AIGroundUnit", "Die", this.id, [], this);
	}

	public Spawn() {
		this.onRpc("AIGroundUnit", "Spawn", this.id, [], this);
	}


	public on(event: "UpdateData", handler: (pos: Vector3, vel: Vector3, accel: Vector3, rot: Vector3) => void): void
	public on(event: "FireBullet", handler: (position: Vector3, velocity: Vector3) => void): void
	public on(event: "Damage", handler: () => void): void
	public on(event: "Die", handler: () => void): void
	public on(event: "Spawn", handler: () => void): void
	public on(event: string, handler: (...args: any[]) => void): void {
		if (!this.listeners[event]) {
			this.listeners[event] = [];
		}

		this.listeners[event].push(handler);
	}
}

export class MissileEntity {
	private listeners: Record<string, Array<(...args: any[]) => void>> = {};

	constructor(public id: string | number, private onRpc?: InstancedRpcCallback<MissileEntity>) { }

	public fireRpcEvent(packet: RPCPacket) {
		if(packet.id != this.id) console.warn("RPC packet ID does not match instance ID:", packet.id, this.id);
		// @ts-ignore
		this.emit(packet.method, ...packet.args);
	}

	public emit(event: string, ...args: any[]) {
		if (this.listeners[event]) {
			this.listeners[event].forEach(handler => {
				handler(...args);
			});
		}
	}

	
	public SyncShit(syncedPos: Vector3, syncedRot: Vector3, syncedVel: Vector3, syncedAccel: Vector3) {
		this.onRpc("MissileEntity", "SyncShit", this.id, [syncedPos, syncedRot, syncedVel, syncedAccel], this);
	}

	public Detonate() {
		this.onRpc("MissileEntity", "Detonate", this.id, [], this);
	}


	public on(event: "SyncShit", handler: (syncedPos: Vector3, syncedRot: Vector3, syncedVel: Vector3, syncedAccel: Vector3) => void): void
	public on(event: "Detonate", handler: () => void): void
	public on(event: string, handler: (...args: any[]) => void): void {
		if (!this.listeners[event]) {
			this.listeners[event] = [];
		}

		this.listeners[event].push(handler);
	}
}

export class GunEntity {
	private listeners: Record<string, Array<(...args: any[]) => void>> = {};

	constructor(public id: string | number, private onRpc?: InstancedRpcCallback<GunEntity>) { }

	public fireRpcEvent(packet: RPCPacket) {
		if(packet.id != this.id) console.warn("RPC packet ID does not match instance ID:", packet.id, this.id);
		// @ts-ignore
		this.emit(packet.method, ...packet.args);
	}

	public emit(event: string, ...args: any[]) {
		if (this.listeners[event]) {
			this.listeners[event].forEach(handler => {
				handler(...args);
			});
		}
	}

	
	public FireBullet(position: Vector3, velocity: Vector3) {
		this.onRpc("GunEntity", "FireBullet", this.id, [position, velocity], this);
	}


	public on(event: "FireBullet", handler: (position: Vector3, velocity: Vector3) => void): void
	public on(event: string, handler: (...args: any[]) => void): void {
		if (!this.listeners[event]) {
			this.listeners[event] = [];
		}

		this.listeners[event].push(handler);
	}
}

export class HardpointEntity {
	private listeners: Record<string, Array<(...args: any[]) => void>> = {};

	constructor(public id: string | number, private onRpc?: InstancedRpcCallback<HardpointEntity>) { }

	public fireRpcEvent(packet: RPCPacket) {
		if(packet.id != this.id) console.warn("RPC packet ID does not match instance ID:", packet.id, this.id);
		// @ts-ignore
		this.emit(packet.method, ...packet.args);
	}

	public emit(event: string, ...args: any[]) {
		if (this.listeners[event]) {
			this.listeners[event].forEach(handler => {
				handler(...args);
			});
		}
	}

	

	
	public on(event: string, handler: (...args: any[]) => void): void {
		if (!this.listeners[event]) {
			this.listeners[event] = [];
		}

		this.listeners[event].push(handler);
	}
}

export class PlayerVehicle {
	private listeners: Record<string, Array<(...args: any[]) => void>> = {};

	constructor(public id: string | number, private onRpc?: InstancedRpcCallback<PlayerVehicle>) { }

	public fireRpcEvent(packet: RPCPacket) {
		if(packet.id != this.id) console.warn("RPC packet ID does not match instance ID:", packet.id, this.id);
		// @ts-ignore
		this.emit(packet.method, ...packet.args);
	}

	public emit(event: string, ...args: any[]) {
		if (this.listeners[event]) {
			this.listeners[event].forEach(handler => {
				handler(...args);
			});
		}
	}

	
	public UpdateData(pos: Vector3, vel: Vector3, accel: Vector3, rot: Vector3, throttle: number, isLanded: boolean, pyr: Vector3) {
		this.onRpc("PlayerVehicle", "UpdateData", this.id, [pos, vel, accel, rot, throttle, isLanded, pyr], this);
	}

	public UpdateOwnerId(ownerId: string) {
		this.onRpc("PlayerVehicle", "UpdateOwnerId", this.id, [ownerId], this);
	}

	public UpdateTGP(direction: Vector3, lockedWorldPoint: Vector3, lockedActor: number) {
		this.onRpc("PlayerVehicle", "UpdateTGP", this.id, [direction, lockedWorldPoint, lockedActor], this);
	}

	public UpdatePilotHead(direction: Vector3) {
		this.onRpc("PlayerVehicle", "UpdatePilotHead", this.id, [direction], this);
	}

	public FireCMS() {
		this.onRpc("PlayerVehicle", "FireCMS", this.id, [], this);
	}

	public SetLock(actorId: number, isLocked: boolean) {
		this.onRpc("PlayerVehicle", "SetLock", this.id, [actorId, isLocked], this);
	}

	public Damage() {
		this.onRpc("PlayerVehicle", "Damage", this.id, [], this);
	}

	public Die() {
		this.onRpc("PlayerVehicle", "Die", this.id, [], this);
	}

	public SetFuel(tank: number, fuel: number) {
		this.onRpc("PlayerVehicle", "SetFuel", this.id, [tank, fuel], this);
	}

	public AttachEquip(equipEntityId: number, hardpointIndex: number) {
		this.onRpc("PlayerVehicle", "AttachEquip", this.id, [equipEntityId, hardpointIndex], this);
	}

	public HSDamage(damage: number, healthIndex: number, sourcePlayerId: string, sourceEntityId: number) {
		this.onRpc("PlayerVehicle", "HSDamage", this.id, [damage, healthIndex, sourcePlayerId, sourceEntityId], this);
	}


	public on(event: "UpdateData", handler: (pos: Vector3, vel: Vector3, accel: Vector3, rot: Vector3, throttle: number, isLanded: boolean, pyr: Vector3) => void): void
	public on(event: "UpdateOwnerId", handler: (ownerId: string) => void): void
	public on(event: "UpdateTGP", handler: (direction: Vector3, lockedWorldPoint: Vector3, lockedActor: number) => void): void
	public on(event: "UpdatePilotHead", handler: (direction: Vector3) => void): void
	public on(event: "FireCMS", handler: () => void): void
	public on(event: "SetLock", handler: (actorId: number, isLocked: boolean) => void): void
	public on(event: "Damage", handler: () => void): void
	public on(event: "Die", handler: () => void): void
	public on(event: "SetFuel", handler: (tank: number, fuel: number) => void): void
	public on(event: "AttachEquip", handler: (equipEntityId: number, hardpointIndex: number) => void): void
	public on(event: "HSDamage", handler: (damage: number, healthIndex: number, sourcePlayerId: string, sourceEntityId: number) => void): void
	public on(event: string, handler: (...args: any[]) => void): void {
		if (!this.listeners[event]) {
			this.listeners[event] = [];
		}

		this.listeners[event].push(handler);
	}
}

export class RadarJammerSync {
	private listeners: Record<string, Array<(...args: any[]) => void>> = {};

	constructor(public id: string | number, private onRpc?: InstancedRpcCallback<RadarJammerSync>) { }

	public fireRpcEvent(packet: RPCPacket) {
		if(packet.id != this.id) console.warn("RPC packet ID does not match instance ID:", packet.id, this.id);
		// @ts-ignore
		this.emit(packet.method, ...packet.args);
	}

	public emit(event: string, ...args: any[]) {
		if (this.listeners[event]) {
			this.listeners[event].forEach(handler => {
				handler(...args);
			});
		}
	}

	
	public BeginJam(idx: number, gPoint: Vector3, velocity: Vector3) {
		this.onRpc("RadarJammerSync", "BeginJam", this.id, [idx, gPoint, velocity], this);
	}

	public UpdateJam(idx: number, gPoint: Vector3, velocity: Vector3, power: number, timestamp: number, drfmFreq: number) {
		this.onRpc("RadarJammerSync", "UpdateJam", this.id, [idx, gPoint, velocity, power, timestamp, drfmFreq], this);
	}

	public EndJam(idx: number) {
		this.onRpc("RadarJammerSync", "EndJam", this.id, [idx], this);
	}

	public TDecoyModel(tIdx: number, decoyIdentityIdx: number) {
		this.onRpc("RadarJammerSync", "TDecoyModel", this.id, [tIdx, decoyIdentityIdx], this);
	}

	public TMode(tIdx: number, mode: number) {
		this.onRpc("RadarJammerSync", "TMode", this.id, [tIdx, mode], this);
	}


	public on(event: "BeginJam", handler: (idx: number, gPoint: Vector3, velocity: Vector3) => void): void
	public on(event: "UpdateJam", handler: (idx: number, gPoint: Vector3, velocity: Vector3, power: number, timestamp: number, drfmFreq: number) => void): void
	public on(event: "EndJam", handler: (idx: number) => void): void
	public on(event: "TDecoyModel", handler: (tIdx: number, decoyIdentityIdx: number) => void): void
	public on(event: "TMode", handler: (tIdx: number, mode: number) => void): void
	public on(event: string, handler: (...args: any[]) => void): void {
		if (!this.listeners[event]) {
			this.listeners[event] = [];
		}

		this.listeners[event].push(handler);
	}
}

export class MessageHandler {
	private listeners: Record<string, Array<(...args: any[]) => void>> = {};

	constructor(public id: string | number, private onRpc?: InstancedRpcCallback<MessageHandler>) { }

	public fireRpcEvent(packet: RPCPacket) {
		if(packet.id != this.id) console.warn("RPC packet ID does not match instance ID:", packet.id, this.id);
		// @ts-ignore
		this.emit(packet.method, ...packet.args);
	}

	public emit(event: string, ...args: any[]) {
		if (this.listeners[event]) {
			this.listeners[event].forEach(handler => {
				handler(...args);
			});
		}
	}

	
	public NetInstantiate(id: number, ownerId: string, path: string, pos: Vector3, rot: Vector3, active: boolean) {
		this.onRpc("MessageHandler", "NetInstantiate", this.id, [id, ownerId, path, pos, rot, active], this);
	}

	public NetDestroy(id: number) {
		this.onRpc("MessageHandler", "NetDestroy", this.id, [id], this);
	}

	public SetEntityUnitID(entityId: number, unitId: number) {
		this.onRpc("MessageHandler", "SetEntityUnitID", this.id, [entityId, unitId], this);
	}

	public CreateJammer(entityId: number, jammerId: string) {
		this.onRpc("MessageHandler", "CreateJammer", this.id, [entityId, jammerId], this);
	}

	public DatalinkActorPos(entityId: number, actorId: number, team: number, identityIndex: number, sensorSource: number, pos: Vector3, vel: Vector3, rwrPrecision: number) {
		this.onRpc("MessageHandler", "DatalinkActorPos", this.id, [entityId, actorId, team, identityIndex, sensorSource, pos, vel, rwrPrecision], this);
	}

	public CreateDebugSphere(id: number) {
		this.onRpc("MessageHandler", "CreateDebugSphere", this.id, [id], this);
	}

	public CreateDebugLine(id: number) {
		this.onRpc("MessageHandler", "CreateDebugLine", this.id, [id], this);
	}

	public SyncTOD() {
		this.onRpc("MessageHandler", "SyncTOD", this.id, [], this);
	}


	public on(event: "NetInstantiate", handler: (id: number, ownerId: string, path: string, pos: Vector3, rot: Vector3, active: boolean) => void): void
	public on(event: "NetDestroy", handler: (id: number) => void): void
	public on(event: "SetEntityUnitID", handler: (entityId: number, unitId: number) => void): void
	public on(event: "CreateJammer", handler: (entityId: number, jammerId: string) => void): void
	public on(event: "DatalinkActorPos", handler: (entityId: number, actorId: number, team: number, identityIndex: number, sensorSource: number, pos: Vector3, vel: Vector3, rwrPrecision: number) => void): void
	public on(event: "CreateDebugSphere", handler: (id: number) => void): void
	public on(event: "CreateDebugLine", handler: (id: number) => void): void
	public on(event: "SyncTOD", handler: () => void): void
	public on(event: string, handler: (...args: any[]) => void): void {
		if (!this.listeners[event]) {
			this.listeners[event] = [];
		}

		this.listeners[event].push(handler);
	}
}

export class VTOLLobby {
	private listeners: Record<string, Array<(...args: any[]) => void>> = {};

	constructor(public id: string | number, private onRpc?: InstancedRpcCallback<VTOLLobby>) { }

	public fireRpcEvent(packet: RPCPacket) {
		if(packet.id != this.id) console.warn("RPC packet ID does not match instance ID:", packet.id, this.id);
		// @ts-ignore
		this.emit(packet.method, ...packet.args);
	}

	public emit(event: string, ...args: any[]) {
		if (this.listeners[event]) {
			this.listeners[event].forEach(handler => {
				handler(...args);
			});
		}
	}

	
	public UpdateLobbyInfo(name: string, missionName: string, playerCount: number, maxPlayers: number, isPrivate: boolean, isConnected: boolean, players: RawPlayerInfo[], hostId: string) {
		this.onRpc("VTOLLobby", "UpdateLobbyInfo", this.id, [name, missionName, playerCount, maxPlayers, isPrivate, isConnected, players, hostId], this);
	}

	public UpdateMissionInfo(name: string, id: string, campaignId: string, workshopId: string, mapId: string, isBuiltin: boolean) {
		this.onRpc("VTOLLobby", "UpdateMissionInfo", this.id, [name, id, campaignId, workshopId, mapId, isBuiltin], this);
	}

	public CloseLobby() {
		this.onRpc("VTOLLobby", "CloseLobby", this.id, [], this);
	}

	public ConnectionResult(success: boolean, reason: string) {
		this.onRpc("VTOLLobby", "ConnectionResult", this.id, [success, reason], this);
	}

	public SyncLeaveLobby() {
		this.onRpc("VTOLLobby", "SyncLeaveLobby", this.id, [], this);
	}

	public SyncLobbyRestart() {
		this.onRpc("VTOLLobby", "SyncLobbyRestart", this.id, [], this);
	}

	public LogMessage(message: string) {
		this.onRpc("VTOLLobby", "LogMessage", this.id, [message], this);
	}

	public UpdateLobbyStatus(state: LobbyReadyState) {
		this.onRpc("VTOLLobby", "UpdateLobbyStatus", this.id, [state], this);
	}

	public isRecording(isRecording: boolean) {
		this.onRpc("VTOLLobby", "isRecording", this.id, [isRecording], this);
	}


	public on(event: "UpdateLobbyInfo", handler: (name: string, missionName: string, playerCount: number, maxPlayers: number, isPrivate: boolean, isConnected: boolean, players: RawPlayerInfo[], hostId: string) => void): void
	public on(event: "UpdateMissionInfo", handler: (name: string, id: string, campaignId: string, workshopId: string, mapId: string, isBuiltin: boolean) => void): void
	public on(event: "CloseLobby", handler: () => void): void
	public on(event: "ConnectionResult", handler: (success: boolean, reason: string) => void): void
	public on(event: "SyncLeaveLobby", handler: () => void): void
	public on(event: "SyncLobbyRestart", handler: () => void): void
	public on(event: "LogMessage", handler: (message: string) => void): void
	public on(event: "UpdateLobbyStatus", handler: (state: LobbyReadyState) => void): void
	public on(event: "isRecording", handler: (isRecording: boolean) => void): void
	public on(event: string, handler: (...args: any[]) => void): void {
		if (!this.listeners[event]) {
			this.listeners[event] = [];
		}

		this.listeners[event].push(handler);
	}
}

export type InstancedRpcClass = Client | DebugLine | DebugSphere | AIAirVehicle | AIGroundUnit | MissileEntity | GunEntity | HardpointEntity | PlayerVehicle | RadarJammerSync | MessageHandler | VTOLLobby;
